name: Docker Image CI/CD

# Run the workflow whenever changes are made to Dockerfiles
on:
  push:
    paths:
      - 'dockerfiles/**'
    branches:
      - 'master'
  pull_request:
    paths:
      - 'dockerfiles/**'
    branches:
      - 'master'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      # Replace with your DockerHub username
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      # Replace with your DockerHub token (stored as a GitHub secret)
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker build environment
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to DockerHub
      - name: Log in to DockerHub
        run: echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

      # Step 4: Build and push Docker images for each Dockerfile in the dockerfiles/ directory
      - name: Build and push Docker images
        run: |
          for dockerfile in $(find ./dockerfiles -name "Dockerfile*"); do
            # Extract version combination from Dockerfile name (e.g., Dockerfile.maven3.9.9-eclipse-temurin17-node20)
            version_tag=$(basename "$dockerfile" | sed 's/Dockerfile\.//g')
            image_name="${DOCKER_USERNAME}/maven-jdk-node:${version_tag}"

            # Build the Docker image locally
            docker build -t "$image_name" -f "$dockerfile" .

            # Get the digest of the built image
            local_digest=$(docker inspect --format='{{index .RepoDigests 0}}' "$image_name" | cut -d'@' -f2)

            # Check if the image already exists on DockerHub and retrieve its digest
            remote_digest=$(docker manifest inspect "$image_name" 2>/dev/null | jq -r '.manifests[0].digest')

            if [ "$local_digest" = "$remote_digest" ]; then
              echo "Docker image ${image_name} is up to date (digest: $local_digest), skipping push."
            else
              echo "Docker image ${image_name} is new or modified, pushing to DockerHub..."
              # Push the Docker image to DockerHub
              docker push "$image_name"
            fi
          done

      # Step 5: Log out from DockerHub
      - name: Log out from DockerHub
        run: docker logout
